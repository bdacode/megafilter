{"name":"Megafilter","tagline":"Easter 2013 project: My replacement for Google Reader, to produce a starred items feed. My copy publishes to http://callanbryant.co.uk/#Recommended","body":"This is a personal replacement for Google reader. It's simple and suits my workflow.\r\n\r\nArticles are added to a circular FIFO queue, so that the latest articles always appear\r\nnext. Articles can be:\r\n\r\n* **Skipped** to be viewed later\r\n* **Published** to a JSONP 'RSS' feed\r\n* **Discarded** from the queue\r\n* **Inspected** to view the article from the original website, with comments\r\n\r\nDestructive actions can be undone.\r\n\r\nThe current article is synchronised across all devices, so you can continue reading\r\non yor smartphone.\r\n\r\n\r\n**State: Very beta but working very well!** I have migrated from Google reader to Megafilter.\r\n\r\n\r\n![screenshot](http://callanbryant.co.uk/images/megafilter.png)\r\n\r\n\r\n[See my blog post about it][2].\r\n\r\n[2]: http://callanbryant.co.uk/#Blog\r\n\r\n\r\n\tsudo npm install -g megafilter\r\n\t# copy subscriptions.xml and starred.json from your google reader takeout to here\r\n\tmegafilter -s subscriptions.xml --import-greader-starred starred.json\r\n\topen http://localhost:8080\r\n\r\nThe idea is that you run this on your own server. You can specify a PORT via\r\nthe environment variable or `--port`. Setcap can be used to run from port\r\n80 without sudo; this is documented at the end of this file.\r\n\r\nThere will be a subscriptions manager soon. For the mean time, always start the\r\nserver with `-s subscriptions.xml`. Note that you only need to import once!\r\n\r\nYou can specify `--password <password>` to require auth. A `--username` can be\r\nset, but this defaults to the executing user.\r\n\r\n\r\nBy default megafilter will save the published items to\r\n`~/megafilter-published.json`. You can change this directory with `--store-dir`\r\n\r\n\r\nWhen running, ~megafilter will wait for new articles. You may have to wait a\r\nbit! A backfill option will be added.\r\n\r\n\r\n[1]: http://stackoverflow.com/questions/413807/is-there-a-way-for-non-root-processes-to-bind-to-privileged-ports-1024-on-l\r\n\r\n\r\n\r\nRESTful JSON API\r\n----------------\r\n\r\n> `GET /next`\r\nGet the next article. Returns `article` and `pending` count.\r\n\r\n> `GET /current`\r\nGet the current article (good for first load) returns `article` and `pending` count.\r\n\r\n> `DELETE /queue/:id`\r\nDiscard an article from the queue.\r\n\r\n> `PUT /publish/:id`\r\nPublish an article by ID from the queue.\r\n\r\n> `GET /published`\r\nGiven a `count` as parameter, return published articles. 0 Means all articles, unspecified  means 30.\r\n\r\n> `GET /pending`\r\nGives the current number of articles pending\r\n\r\n> `DELETE /published/:id`\r\nDelete an article from the published collection\r\n\r\n> `POST /enqueue`\r\nRemotely adds an article to the queue.\r\n\r\n\r\n\r\n\r\nArticle format\r\n--------------\r\n\r\nThe same as the node-feedparser format.\r\n\r\n* `title`\r\n* `description` (frequently, the full article content)\r\n* `summary` (frequently, an excerpt of the article content)\r\n* `link`\r\n* `origlink` (when FeedBurner or Pheedo puts a special tracking url in the `link` property, `origlink` contains the original link)\r\n* `date` (most recent update)\r\n* `pubdate` (original published date)\r\n* `author`\r\n* `guid` (a unique identifier for the article)\r\n* `comments` (a link to the article's comments section)\r\n* `image` (an Object containing `url` and `title` properties)\r\n* `categories` (an Array of Strings)\r\n* `source` (an Object containing `url` and `title` properties pointing to the original source for an article; see the [RSS Spec](http://cyber.law.harvard.edu/rss/rss.html#ltsourcegtSubelementOfLtitemgt) for an explanation of this element)\r\n* `enclosures` (an Array of Objects, each representing a podcast or other enclosure and having a `url` property and possibly `type` and `length` properties)\r\n* `meta` (an Object containing all the feed meta properties; especially handy when using the EventEmitter interface to listen to `article` emissions)\r\n\r\n\r\nRunning without sudo on port 80\r\n-------------------------------\r\n\r\nIf you want to host on port 80 under ubuntu on your account, you can install `libcap2-bin` \r\nthen run `setcap 'cap_net_bind_service=+ep' /usr/local/bin/node` to give node access to port 80.\r\n\r\nYour path to the `node` binary may vary, you can find it with `which node`\r\n\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nMegafilter would not have been possible without the following awesome projects:\r\n\r\n  * [node feedparser][3]: Used to understand RSS feeds\r\n  * [jQuery hotkeys][4]: Used for the keyboard shorcuts\r\n  * [Font Awesome][5]: used for the UI graphics\r\n  * [jQuery][6]\r\n  * [node restify][7]: Used for the RESTful JSON API, and UI serving\r\n\r\n[3]: https://github.com/danmactough/node-feedparser\r\n[4]: https://github.com/jeresig/jquery.hotkeys\r\n[5]: http://fortawesome.github.io/Font-Awesome/\r\n[6]: http://jquery.com\r\n[7]: http://mcavage.github.io/node-restify/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}